#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-app-websocket-demo:server');
var http = require('http');
var { WebSocket } = require('ws');
var ioServer = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create WebSocket server.
 * Choose Between Available WebSocket Type
 * - Socket.IO ('socket.io')
 * - Native WebSocket ('native')
 */

var socketType = process.env.SOCKET_TYPE;

if (socketType == 'socket.io') {
  /** @type {import('socket.io').Server} */
  var io = ioServer(server, {
    cors: {
      origin: '*',
    },
  });
  var typingList = [];
  io.on('connection', (client) => {
    console.log(`New Client ${client.id} Has Connected`);
    client.send(`Welcome To Express App WebSocket Demo!`);
    client.on('message', (data) => {
      client.broadcast.emit('message', `${data}`);
    });
    client.on('typing', (data) => {
      if (data) {
        var alreadyInArray = typingList.filter((value) => value == client.id).length;
        if (alreadyInArray == 0) {
          typingList.push(client.id);
        }
      } else {
        typingList = typingList.filter((value) => value != client.id);
      }
      io.emit('typing', typingList);
    });
    client.on('broadcast', (data) => {
      io.emit('broadcast', `${data}`);
    });
    client.on('disconnect', (reason) => {
      typingList = typingList.filter((value) => value != client.id);
      console.log(`The Client ${client.id} Has Disconnected With Reason (${reason})`);
    });
  });
} else {
  var wss = new WebSocket.Server({ server: server });
  wss.on('connection', (ws) => {
    console.log(`New Client Has Connected`);
    ws.send(`Welcome To Express App WebSocket Demo!`);
    ws.onmessage = ({ data }) => {
      wss.clients.forEach((client) => {
        if (client != ws && client.readyState === WebSocket.OPEN) {
          client.send(`${data}`);
        }
      });
    };
    ws.onclose = () => {
      console.log(`The Client Has Disconnected`);
    };
    ws.on('broadcast', (data) => {
      wss.clients.forEach((client) => {
        client.send(data);
      });
    });
  });
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
  debug('Listening on ' + bind);
}
